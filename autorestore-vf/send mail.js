// vRO Scriptable Task: sendRestoreEmailNotification
// Sends a professional email notification with a summary of the Automated VM Restore Workflow,
// including VDC-specific tables for restore operations and VMs without restore points,
// using the report generated by generate_restore_report.js, and attaches the full report file.

// Inputs:
// - report: string - Markdown report from generate_restore_report.js
// - resourceCategoryPath: string - Path to resource category (e.g., "/Reports")
// - reportFileName: string - Name of the report file (e.g., "2025-05-25_restore_workflow_report.md")
// - smtpHost: string - SMTP host (e.g., "smtp.gmail.com")
// - smtpPort: number - SMTP port (e.g., 587)
// - username: string - SMTP username (e.g., "user@domain.com")
// - password: SecureString - SMTP password
// - fromName: string - Sender's name (e.g., "Veeam Automation")
// - fromAddress: string - Sender's email (e.g., "automation@domain.com")
// - toAddressList: Array/string - Recipient email addresses (e.g., ["admin@domain.com"])
// - subject: string - Email subject (e.g., "VM Restore Workflow Report")
// - useSsl: boolean - Use SSL for SMTP
// - useStartTls: boolean - Use STARTTLS for SMTP
// - ccList: Array/string - Optional CC recipients
// - bccList: Array/string - Optional BCC recipients
// - companyLogoUrl: string - URL to company logo image (e.g., "https://yourcompany.com/logo.png")
// - companyName: string - Company name for branding (e.g., "Your Company")
// - companyWebsite: string - Company website URL for footer (e.g., "https://yourcompany.com")

// Function to convert array to comma-separated string
function convertToCommaSeparatedList(list) {
    if (!list || (list.length && list.length === 0)) {
        return null;
    }
    if (typeof list === "string") {
        return list;
    }
    var result = "";
    for (var i = 0; i < list.length; i++) {
        result += list[i];
        if (i < list.length - 1) result += ",";
    }
    return result;
}

// Function to pad numbers with leading zeros
function pad(number) {
    return (number < 10 ? "0" : "") + number;
}

// Function to clean and format details
function cleanDetails(detail) {
    return detail.trim().replace(/^\*\*|\*\*$/g, "");
}

// Function to parse markdown and generate HTML
function markdownToHtml(markdown, companyName, companyLogoUrl, companyWebsite) {
    if (!markdown) {
        return "<html><body><p>No report content provided for today.</p></body></html>";
    }

    // Parse markdown to extract data
    var lines = markdown.split("\n");
    var summarySection = false;
    var vdcSection = false;
    var inRestoreOps = false;
    var inVmsWithoutPoints = false;
    var restoreType = "N/A";
    var vdcProcessed = "N/A";
    var totalVmsProcessed = "N/A";
    var vmsWithoutRestorePoints = "N/A";
    var vdcNames = [];
    var currentVdc = null;
    var restoreOpsByVdc = {};
    var vmsWithoutPointsByVdc = {};

    for (var i = 0; i < lines.length; i++) {
        var line = lines[i].trim();

        // Extract summary metrics
        if (line.indexOf("## Summary") === 0) {
            summarySection = true;
            continue;
        }
        if (summarySection && line.indexOf("## ") === 0) {
            summarySection = false;
            continue;
        }
        if (summarySection && line.indexOf("- ") === 0) {
            var match = line.substring(2).match(/\*\*(.*?):\*\* (.*)/);
            if (match) {
                var key = match[1];
                var value = match[2];
                if (key === "Restore Type") restoreType = value;
                if (key === "VDCs Processed") vdcProcessed = value;
                if (key === "Total VMs Processed") totalVmsProcessed = value;
                if (key === "VMs Without Restore Points") vmsWithoutRestorePoints = value;
            }
        }

        // Extract VDC names and restore operations
        if (line.indexOf("### VDC: ") === 0) {
            currentVdc = line.substring(9).trim();
            vdcNames.push(currentVdc);
            vdcSection = true;
            inRestoreOps = false;
            inVmsWithoutPoints = false;
            if (!restoreOpsByVdc[currentVdc]) restoreOpsByVdc[currentVdc] = [];
            if (!vmsWithoutPointsByVdc[currentVdc]) vmsWithoutPointsByVdc[currentVdc] = [];
            continue;
        }
        if (vdcSection && line.indexOf("#### Restore Operations:") === 0) {
            inRestoreOps = true;
            inVmsWithoutPoints = false;
            continue;
        }
        if (vdcSection && line.indexOf("#### VMs Without Restore Points:") === 0) {
            inRestoreOps = false;
            inVmsWithoutPoints = true;
            continue;
        }
        if (inRestoreOps && line.indexOf("- **VM:** ") === 0) {
            var vmName = line.replace("- **VM:** ", "").trim();
            var stepLine = lines[++i].trim();
            var timestampLine = lines[++i].trim();
            var statusLine = lines[++i].trim();
            var detailsLine = lines[++i].trim();

            // Use a more flexible check for sub-items
            if (!stepLine.match(/^\s*- \*\*Step:\*\*/i) || 
                !timestampLine.match(/^\s*- \*\*Timestamp:\*\*/i) || 
                !statusLine.match(/^\s*- \*\*Status:\*\*/i) || 
                !detailsLine.match(/^\s*- \*\*Details:\*\*/i)) {
                continue;
            }

            var step = stepLine.replace(/^\s*- \*\*Step:\*\* /, "").trim();
            var timestamp = timestampLine.replace(/^\s*- \*\*Timestamp:\*\* /, "").trim();
            var status = statusLine.replace(/^\s*- \*\*Status:\*\* /, "").trim();
            var statusLower = status.toLowerCase();
            var statusClass = (statusLower === "success" ? "status-success" : "status-failure");
            var statusLabel = status.charAt(0).toUpperCase() + status.slice(1);
            var details = cleanDetails(detailsLine.replace(/^\s*- \*\*Details:\*\* /, ""));

            restoreOpsByVdc[currentVdc].push({
                vmName: vmName,
                step: step,
                timestamp: timestamp,
                status: statusLabel,
                statusClass: statusClass,
                details: details
            });
            i++; // Skip the empty line
        }
        if (inVmsWithoutPoints && line.indexOf("- ") === 0) {
            var vmInfo = line.substring(2).trim();
            vmsWithoutPointsByVdc[currentVdc].push(vmInfo);
        }
    }

    // Build HTML
    var html = "<html><head><style>" +
        "body { font-family: 'Segoe UI', Arial, sans-serif; background-color: #f5f7fa; margin: 0; padding: 30px; }" +
        ".container { max-width: 900px; margin: 0 auto; background-color: #ffffff; border-radius: 12px; box-shadow: 0 4px 12px rgba(0,0,0,0.1); }" +
        ".header { background: linear-gradient(135deg, #003366, #004080); padding: 25px; text-align: center; color: #ffffff; border-top-left-radius: 12px; border-top-right-radius: 12px; }" +
        ".header img { max-width: 150px; height: auto; }" +
        ".content { padding: 30px; }" +
        "h1 { color: #1a73e8; font-size: 28px; margin-bottom: 15px; }" +
        "h2 { color: #1a73e8; font-size: 22px; margin-top: 25px; border-bottom: 2px solid #e8f0fe; padding-bottom: 5px; }" +
        "h3.vdc-name { color: #1a73e8; font-size: 20px; margin-top: 30px; margin-bottom: 15px; font-weight: 600; border-bottom: 1px solid #1a73e8; padding-bottom: 5px; }" +
        "h4.subsection { color: #F5A623; font-size: 16px; margin-top: 20px; margin-bottom: 10px; font-weight: 500; }" +
        "p { color: #555555; line-height: 1.8; font-size: 15px; }" +
        ".summary-box { background-color: #e8f0fe; padding: 20px; border-radius: 8px; margin-bottom: 25px; border-left: 5px solid #1a73e8; }" +
        ".summary-box p { margin: 5px 0; }" +
        "table { width: 100%; border-collapse: collapse; margin: 15px 0; border: 1px solid #e0e7ee; }" +
        "th, td { padding: 12px 15px; text-align: left; border: 1px solid #e0e7ee; font-size: 14px; }" +
        "th { background-color: #f8fafc; color: #333333; font-weight: 600; }" +
        "td { background-color: #ffffff; }" +
        ".status-success { color: #34c759; font-weight: 600; }" +
        ".status-failure { color: #ff4d4f; font-weight: 600; }" +
        ".vms-list { margin: 10px 0; padding-left: 20px; }" +
        ".vms-list li { color: #555555; font-size: 14px; line-height: 1.6; }" +
        ".footer { background-color: #f5f7fa; padding: 20px; text-align: center; font-size: 13px; color: #777777; border-bottom-left-radius: 12px; border-bottom-right-radius: 12px; }" +
        ".footer a { color: #1a73e8; text-decoration: none; }" +
        "</style></head><body>" +
        "<div class=\"container\">" +
        "<div class=\"header\">" +
        (companyLogoUrl ? "<img src=\"" + companyLogoUrl + "\" alt=\"" + (companyName || 'Company') + " Logo\" />" : "<h1>" + (companyName || 'Company') + "</h1>") +
        "</div>" +
        "<div class=\"content\">" +
        "<h1>Automated VM Restore Workflow Report</h1>";

    // Add date and greeting
    var date = new Date();
    var formattedDate = date.getFullYear() + "-" + pad(date.getMonth() + 1) + "-" + pad(date.getDate()) + " " + pad(date.getHours() + 1) + ":" + pad(date.getMinutes());
    html += "<p><strong>Generated on:</strong> " + formattedDate + "</p>" +
        "<p>Dear IT Team, below is the summary of today's VM Restore Workflow execution, including key operations and VMs without restore points. The full report is attached for more details.</p>";

    // Add summary box
    html += "<div class=\"summary-box\">" +
        "<h2>Summary</h2>" +
        "<p><strong>Restore Type:</strong> " + restoreType + "</p>" +
        "<p><strong>VDCs Processed:</strong> " + vdcProcessed + "</p>" +
        "<p><strong>Total VMs Processed:</strong> " + totalVmsProcessed + "</p>" +
        "<p><strong>VMs Without Restore Points:</strong> " + vmsWithoutRestorePoints + "</p>" +
        "<p><strong>VDCs:</strong> " + (vdcNames.length > 0 ? vdcNames.join(", ") : "None") + "</p>" +
        "</div>";

    // Add detailed section with tables and VMs without restore points
    if (vdcNames.length > 0) {
        html += "<h2>Detailed Overview</h2>";
        for (var v = 0; v < vdcNames.length; v++) {
            var vdc = vdcNames[v];
            html += "<h3 class=\"vdc-name\">" + vdc + "</h3>";

            // Restore Operations Table
            if (restoreOpsByVdc[vdc] && restoreOpsByVdc[vdc].length > 0) {
                html += "<table>" +
                    "<tr><th>VM</th><th>Step</th><th>Timestamp</th><th>Status</th><th>Details</th></tr>";
                for (var k = 0; k < restoreOpsByVdc[vdc].length; k++) {
                    var op = restoreOpsByVdc[vdc][k];
                    html += "<tr>" +
                        "<td>" + op.vmName + "</td>" +
                        "<td>" + op.step + "</td>" +
                        "<td>" + op.timestamp + "</td>" +
                        "<td class=\"" + op.statusClass + "\">" + op.status + "</td>" +
                        "<td>" + op.details + "</td>" +
                        "</tr>";
                }
                html += "</table>";
            } else {
                html += "<p>No restore operations recorded for this VDC.</p>";
            }

            // VMs Without Restore Points
            if (vmsWithoutPointsByVdc[vdc] && vmsWithoutPointsByVdc[vdc].length > 0) {
                html += "<h4 class=\"subsection\">VMs Without Restore Points</h4>" +
                    "<ul class=\"vms-list\">";
                for (var m = 0; m < vmsWithoutPointsByVdc[vdc].length; m++) {
                    html += "<li>" + vmsWithoutPointsByVdc[vdc][m] + "</li>";
                }
                html += "</ul>";
            }
        }
    } else {
        html += "<p>No VDCs processed in this run.</p>";
    }

    // Footer
    html += "</div><div class=\"footer\">© " + new Date().getFullYear() + " " +
        (companyName || "Your Company") +
        ". Visit us at <a href=\"" + (companyWebsite || "#") + "\">" +
        (companyWebsite || "our website") + "</a>.</div></div></body></html>";

    return html;
}

try {
    var message = new EmailMessage();

    // Configure SMTP settings
    if (!smtpHost) throw "SMTP host is required";
    message.smtpHost = smtpHost;
    if (!smtpPort || smtpPort <= 0) throw "SMTP port is required and must be a positive number";
    message.smtpPort = smtpPort;
    message.username = username;
    message.password = password;
    if (fromName) message.fromName = fromName;
    if (!fromAddress) throw "From address is required";
    message.fromAddress = fromAddress;
    message.useSsl = useSsl ? true : false;
    message.useStartTls = useStartTls ? true : false;

    // Build address lists
    message.toAddress = convertToCommaSeparatedList(toAddressList);
    if (!message.toAddress) throw "At least one recipient is required";
    message.ccAddress = convertToCommaSeparatedList(ccList);
    message.bccAddress = convertToCommaSeparatedList(bccList);

    // Set subject
    message.subject = ("VM Restore Workflow Report - " + new Date().toISOString().split("T")[0]);

    // Generate HTML content
    var htmlContent = markdownToHtml(report, companyName, companyLogoUrl, companyWebsite);
    message.addMimePart(htmlContent, "text/html; charset=UTF-8");
    var resourceCategoryPath = "/Reports";
    var reportFileName = logFileName;
    // Attach the full report file
    var resourceCategory = Server.getResourceElementCategoryWithPath(resourceCategoryPath);
    if (!resourceCategory) throw "Resource Category not found at path: " + resourceCategoryPath;
    var reportResourceElement = null;
    for (var i = 0; i < resourceCategory.resourceElements.length; i++) {
        if (resourceCategory.resourceElements[i].name === reportFileName) {
            reportResourceElement = resourceCategory.resourceElements[i];
            break;
        }
    }
    if (!reportResourceElement) throw "Report file '" + reportFileName + "' not found!";
    var mimeAttachment = reportResourceElement.getContentAsMimeAttachment();
    if (mimeAttachment && mimeAttachment.content) {
        message.addMimePart(mimeAttachment, mimeAttachment.mimeType);
        System.log("Attached full report: " + reportFileName);
    } else {
        throw "Failed to retrieve content of report file: " + reportFileName;
    }

    // Log and send
    System.log("Sending email to host: " + message.smtpHost + ":" + message.smtpPort +
               ", from: " + message.fromAddress + ", to: " + message.toAddress);
    message.sendMessage();
    System.log("Email sent successfully");
} catch (e) {
    System.error("Failed to send email: " + e);
    throw e;
}